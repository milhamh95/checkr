// Code generated by counterfeiter. DO NOT EDIT.
package counterfeiter

import (
	"sync"

	"github.com/milhamh95/checkr/domain"
)

type FakeCartStorageSource struct {
	AddItemStub        func(domain.CartItem)
	addItemMutex       sync.RWMutex
	addItemArgsForCall []struct {
		arg1 domain.CartItem
	}
	FetchItemsStub        func() []domain.CartItem
	fetchItemsMutex       sync.RWMutex
	fetchItemsArgsForCall []struct {
	}
	fetchItemsReturns struct {
		result1 []domain.CartItem
	}
	fetchItemsReturnsOnCall map[int]struct {
		result1 []domain.CartItem
	}
	GetItemStub        func(string) (domain.CartItem, error)
	getItemMutex       sync.RWMutex
	getItemArgsForCall []struct {
		arg1 string
	}
	getItemReturns struct {
		result1 domain.CartItem
		result2 error
	}
	getItemReturnsOnCall map[int]struct {
		result1 domain.CartItem
		result2 error
	}
	RemoveCartItemsStub        func()
	removeCartItemsMutex       sync.RWMutex
	removeCartItemsArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCartStorageSource) AddItem(arg1 domain.CartItem) {
	fake.addItemMutex.Lock()
	fake.addItemArgsForCall = append(fake.addItemArgsForCall, struct {
		arg1 domain.CartItem
	}{arg1})
	stub := fake.AddItemStub
	fake.recordInvocation("AddItem", []interface{}{arg1})
	fake.addItemMutex.Unlock()
	if stub != nil {
		fake.AddItemStub(arg1)
	}
}

func (fake *FakeCartStorageSource) AddItemCallCount() int {
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	return len(fake.addItemArgsForCall)
}

func (fake *FakeCartStorageSource) AddItemCalls(stub func(domain.CartItem)) {
	fake.addItemMutex.Lock()
	defer fake.addItemMutex.Unlock()
	fake.AddItemStub = stub
}

func (fake *FakeCartStorageSource) AddItemArgsForCall(i int) domain.CartItem {
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	argsForCall := fake.addItemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCartStorageSource) FetchItems() []domain.CartItem {
	fake.fetchItemsMutex.Lock()
	ret, specificReturn := fake.fetchItemsReturnsOnCall[len(fake.fetchItemsArgsForCall)]
	fake.fetchItemsArgsForCall = append(fake.fetchItemsArgsForCall, struct {
	}{})
	stub := fake.FetchItemsStub
	fakeReturns := fake.fetchItemsReturns
	fake.recordInvocation("FetchItems", []interface{}{})
	fake.fetchItemsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCartStorageSource) FetchItemsCallCount() int {
	fake.fetchItemsMutex.RLock()
	defer fake.fetchItemsMutex.RUnlock()
	return len(fake.fetchItemsArgsForCall)
}

func (fake *FakeCartStorageSource) FetchItemsCalls(stub func() []domain.CartItem) {
	fake.fetchItemsMutex.Lock()
	defer fake.fetchItemsMutex.Unlock()
	fake.FetchItemsStub = stub
}

func (fake *FakeCartStorageSource) FetchItemsReturns(result1 []domain.CartItem) {
	fake.fetchItemsMutex.Lock()
	defer fake.fetchItemsMutex.Unlock()
	fake.FetchItemsStub = nil
	fake.fetchItemsReturns = struct {
		result1 []domain.CartItem
	}{result1}
}

func (fake *FakeCartStorageSource) FetchItemsReturnsOnCall(i int, result1 []domain.CartItem) {
	fake.fetchItemsMutex.Lock()
	defer fake.fetchItemsMutex.Unlock()
	fake.FetchItemsStub = nil
	if fake.fetchItemsReturnsOnCall == nil {
		fake.fetchItemsReturnsOnCall = make(map[int]struct {
			result1 []domain.CartItem
		})
	}
	fake.fetchItemsReturnsOnCall[i] = struct {
		result1 []domain.CartItem
	}{result1}
}

func (fake *FakeCartStorageSource) GetItem(arg1 string) (domain.CartItem, error) {
	fake.getItemMutex.Lock()
	ret, specificReturn := fake.getItemReturnsOnCall[len(fake.getItemArgsForCall)]
	fake.getItemArgsForCall = append(fake.getItemArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetItemStub
	fakeReturns := fake.getItemReturns
	fake.recordInvocation("GetItem", []interface{}{arg1})
	fake.getItemMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCartStorageSource) GetItemCallCount() int {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	return len(fake.getItemArgsForCall)
}

func (fake *FakeCartStorageSource) GetItemCalls(stub func(string) (domain.CartItem, error)) {
	fake.getItemMutex.Lock()
	defer fake.getItemMutex.Unlock()
	fake.GetItemStub = stub
}

func (fake *FakeCartStorageSource) GetItemArgsForCall(i int) string {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	argsForCall := fake.getItemArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCartStorageSource) GetItemReturns(result1 domain.CartItem, result2 error) {
	fake.getItemMutex.Lock()
	defer fake.getItemMutex.Unlock()
	fake.GetItemStub = nil
	fake.getItemReturns = struct {
		result1 domain.CartItem
		result2 error
	}{result1, result2}
}

func (fake *FakeCartStorageSource) GetItemReturnsOnCall(i int, result1 domain.CartItem, result2 error) {
	fake.getItemMutex.Lock()
	defer fake.getItemMutex.Unlock()
	fake.GetItemStub = nil
	if fake.getItemReturnsOnCall == nil {
		fake.getItemReturnsOnCall = make(map[int]struct {
			result1 domain.CartItem
			result2 error
		})
	}
	fake.getItemReturnsOnCall[i] = struct {
		result1 domain.CartItem
		result2 error
	}{result1, result2}
}

func (fake *FakeCartStorageSource) RemoveCartItems() {
	fake.removeCartItemsMutex.Lock()
	fake.removeCartItemsArgsForCall = append(fake.removeCartItemsArgsForCall, struct {
	}{})
	stub := fake.RemoveCartItemsStub
	fake.recordInvocation("RemoveCartItems", []interface{}{})
	fake.removeCartItemsMutex.Unlock()
	if stub != nil {
		fake.RemoveCartItemsStub()
	}
}

func (fake *FakeCartStorageSource) RemoveCartItemsCallCount() int {
	fake.removeCartItemsMutex.RLock()
	defer fake.removeCartItemsMutex.RUnlock()
	return len(fake.removeCartItemsArgsForCall)
}

func (fake *FakeCartStorageSource) RemoveCartItemsCalls(stub func()) {
	fake.removeCartItemsMutex.Lock()
	defer fake.removeCartItemsMutex.Unlock()
	fake.RemoveCartItemsStub = stub
}

func (fake *FakeCartStorageSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addItemMutex.RLock()
	defer fake.addItemMutex.RUnlock()
	fake.fetchItemsMutex.RLock()
	defer fake.fetchItemsMutex.RUnlock()
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	fake.removeCartItemsMutex.RLock()
	defer fake.removeCartItemsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCartStorageSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
